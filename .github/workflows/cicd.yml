name: Spring Boot CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (without tests)
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: lsheon0927/runapp:latest

  # 운영 환경 배포 (main 브랜치)
  deploy-prod:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Production Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 2222
          command_timeout: 20m  # 타임아웃 시간 증가
          debug: true  # 디버깅 정보 활성화
          script: |
            # 중간 상태 로깅 추가
            echo "Starting deployment process..."
            
            # 프로젝트 디렉토리로 이동
            mkdir -p ~/running-app
            cd ~/running-app
            echo "Created and moved to directory: $(pwd)"
            
            # Docker 로그인 (인라인 에코 대신 환경 변수 사용)
            echo "Logging into Docker Hub..."
            DOCKER_TOKEN='${{ secrets.DOCKER_HUB_TOKEN }}'
            echo "$DOCKER_TOKEN" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            echo "Docker login completed"
            
            # 환경 변수 미리 설정 (변수 해석 문제 방지)
            echo "Setting environment variables..."
            DB_NAME_VALUE='${{ secrets.DB_NAME }}'
            DB_USER_VALUE='${{ secrets.DB_USER }}'
            DB_PASSWORD_VALUE='${{ secrets.DB_PASSWORD }}'
            REDIS_HOST_VALUE='runningRedis'
            REDIS_PORT_VALUE='${{ secrets.REDIS_PORT }}'
            REDIS_PASSWORD_VALUE='${{ secrets.REDIS_PASSWORD }}'
            JWT_SECRET_VALUE='${{ secrets.JWT_SECRET }}'
            
            # docker-compose-prod.yml 파일 생성 (여기서 YAML 문법 문제 해결)
            echo "Creating docker-compose-prod.yml file..."
            cat > docker-compose-prod.yml << 'EOL'
            version: '3'
            services:
              app:
                image: lsheon0927/runapp:latest
                ports:
                  - "${APP_PORT:-9000}:8080"
                depends_on:
                  - postgres
                  - redis
                  - elasticsearch
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
                  - SPRING_DATASOURCE_USERNAME=${DB_USER}
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                  - SPRING_ELASTICSEARCH_REST_URIS=http://elasticsearch:9200
                  - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
                  - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
                  - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
                  - APP_AUTH_JWT_SECRET_KEY=${JWT_SECRET}
                  - APP_AUTH_JWT_ACCESS_TOKEN_EXPIRATION_MS=3600000
                  - APP_AUTH_JWT_REFRESH_TOKEN_EXPIRATION_MS=604800000
                restart: always
                volumes:
                  - ./logs:/app/logs

              postgres:
                image: postgres:14
                ports:
                  - "5433:5432"
                environment:
                  - POSTGRES_DB=${DB_NAME}
                  - POSTGRES_USER=${DB_USER}
                  - POSTGRES_PASSWORD=${DB_PASSWORD}
                volumes:
                  - postgres-prod-data:/var/lib/postgresql/data
                restart: always

              redis:
                image: redis:latest
                container_name: ${REDIS_HOST}
                ports:
                  - "${REDIS_PORT}:6379"
                command: redis-server --requirepass ${REDIS_PASSWORD}
                volumes:
                  - redis-data:/data
                restart: always

              elasticsearch:
                image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-7.17.9}
                ports:
                  - "9200:9200"
                environment:
                  - discovery.type=single-node
                  - xpack.security.enabled=false
                  - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
                volumes:
                  - elasticsearch-prod-data:/usr/share/elasticsearch/data
                restart: always

              kibana:
                image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION:-7.17.9}
                ports:
                  - "${KIBANA_PORT:-5601}:5601"
                environment:
                  - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
                depends_on:
                  - elasticsearch
                restart: always
            
              nginx:
                image: nginx:latest
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx/conf:/etc/nginx/conf.d
                  - ./nginx/ssl:/etc/nginx/ssl
                depends_on:
                  - app
                restart: always

            volumes:
              postgres-prod-data:
              redis-data:
              elasticsearch-prod-data:
            EOL
            echo "docker-compose-prod.yml file created successfully"
            
            # .env.prod 파일 생성 (GitHub Secrets 값 사용)
            echo "Creating .env.prod file..."
            cat > .env.prod << EOL
            # 운영 환경 설정
            DB_NAME=${DB_NAME_VALUE}
            DB_USER=${DB_USER_VALUE}
            DB_PASSWORD=${DB_PASSWORD_VALUE}
            DB_PORT=5433

            # Elasticsearch 설정
            ELASTIC_VERSION=7.17.9
            ELASTIC_PASSWORD=elastic_secure_prod_password

            # 애플리케이션 설정
            APP_PORT=9000
            SPRING_PROFILES_ACTIVE=prod
            LOG_LEVEL=INFO

            # Redis 설정
            REDIS_HOST=${REDIS_HOST_VALUE}
            REDIS_PORT=${REDIS_PORT_VALUE}
            REDIS_PASSWORD=${REDIS_PASSWORD_VALUE}

            # JWT 설정
            JWT_SECRET=${JWT_SECRET_VALUE}
            EOL
            echo ".env.prod file created successfully"
            
            # 디렉토리 구조 확인
            echo "Checking directory structure..."
            ls -la
            
            # 컨테이너 종료
            echo "Stopping existing containers..."
            docker-compose -f docker-compose-prod.yml --env-file .env.prod down || true
            echo "Containers stopped"
            
            # 이미지 풀링을 각 서비스별로 분리 (타임아웃 방지)
            echo "Pulling images..."
            
            echo "Pulling PostgreSQL image..."
            docker pull postgres:14 || echo "Failed to pull PostgreSQL image, but continuing..."
            
            echo "Pulling Redis image..."
            docker pull redis:latest || echo "Failed to pull Redis image, but continuing..."
            
            echo "Pulling Elasticsearch image..."
            docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.9 || echo "Failed to pull Elasticsearch image, but continuing..."
            
            echo "Pulling Kibana image..."
            docker pull docker.elastic.co/kibana/kibana:7.17.9 || echo "Failed to pull Kibana image, but continuing..."
            
            echo "Pulling Nginx image..."
            docker pull nginx:latest || echo "Failed to pull Nginx image, but continuing..."
            
            echo "Pulling app image..."
            docker pull lsheon0927/runapp:latest || echo "Failed to pull app image, but continuing..."
            
            echo "All image pulls attempted"
            
            # 컨테이너 시작
            echo "Starting containers..."
            docker-compose -f docker-compose-prod.yml --env-file .env.prod up -d
            echo "Containers started"
            
            # 불필요 이미지 정리
            echo "Cleaning up unused images..."
            docker image prune -f
            echo "Cleanup completed"
            
            # 상태 확인
            echo "Checking container status..."
            docker ps -a
            echo "Deployment completed successfully!"