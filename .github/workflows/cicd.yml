# 테스트용 주석처리
#name: 간소화된 CI/CD 파이프라인
#
#on:
#  push:
#    branches: [develop, main]
#  pull_request:
#    branches: [main]
#
#env:
#  DOCKER_IMAGE: lsheon0927/runapp
#
#jobs:
#  build:
#    name: 빌드 및 테스트
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 코드 체크아웃
#        uses: actions/checkout@v4
#
#      - name: Java 17 설정
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Gradle 캐시 설정
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Docker Hub 로그인
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_TOKEN }}
#
#      - name: Docker 이미지 빌드 및 푸시
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          push: true
#          tags: |
#            ${{ env.DOCKER_IMAGE }}:latest
#            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#
#  deploy:
#    name: 서버 배포
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#
#    steps:
#      - name: 서버 배포
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USER }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: ${{ secrets.SSH_PORT }}
#          timeout: 300s
#          command_timeout: 600s
#          script: |
#            echo "🚀 배포 시작"
#            cd ${{ secrets.PROJECT_PATH }}
#
#            # Docker 로그인
#            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
#
#            # 최신 이미지 다운로드
#            docker pull ${{ env.DOCKER_IMAGE }}:latest
#
#            # 컨테이너 재시작
#            docker-compose -f docker-compose-fixed.yml down
#            docker-compose -f docker-compose-fixed.yml up -d
#
#            # 헬스체크 (30초)
#            echo "헬스체크 중..."
#            for i in {1..15}; do
#              if curl -f -s http://localhost:8100/health >/dev/null 2>&1; then
#                echo "✅ 배포 성공!"
#                break
#              elif [ $i -eq 15 ]; then
#                echo "❌ 헬스체크 실패"
#                exit 1
#              else
#                sleep 2
#              fi
#            done
#
#            echo "🎉 배포 완료!"