name: Spring Boot CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (without tests)
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: lsheon0927/runapp:latest

  # 운영 환경 배포 (main 브랜치)
  deploy-prod:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Production Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 2222
          script: |
            # 프로젝트 디렉토리로 이동
            mkdir -p ~/running-app
            cd ~/running-app

            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # docker-compose-prod.yml 파일 생성
            cat > docker-compose-prod.yml << 'EOL'
            version: '3'
            services:
              app:
                image: lsheon0927/runapp:latest
                ports:
                  - "${APP_PORT:-9000}:8080"
                depends_on:
                  - postgres
                  - redis
                  - elasticsearch
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
                  - SPRING_DATASOURCE_USERNAME=${DB_USER}
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                  - SPRING_ELASTICSEARCH_REST_URIS=http://elasticsearch:9200
                  - SPRING_DATA_REDIS_HOST=redis
                  - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
                  - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
                  - APP_AUTH_JWT_SECRET_KEY=${JWT_SECRET}
                  - APP_AUTH_JWT_ACCESS_TOKEN_EXPIRATION_MS=3600000  # 1시간
                  - APP_AUTH_JWT_REFRESH_TOKEN_EXPIRATION_MS=604800000  # 7일

                restart: always
                volumes:
                  - ./logs:/app/logs

              postgres:
                image: postgres:14
                ports:
                  - "5433:5432"
                environment:
                  - POSTGRES_DB=${DB_NAME}
                  - POSTGRES_USER=${DB_USER}
                  - POSTGRES_PASSWORD=${DB_PASSWORD}
                volumes:
                  - postgres-prod-data:/var/lib/postgresql/data
                restart: always

              redis:
                image: redis:latest
                ports:
                  - "${REDIS_PORT:-6379}:6379"
                command: redis-server --requirepass ${REDIS_PASSWORD}
                volumes:
                  - redis-data:/data
                restart: always

              elasticsearch:
                image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-7.17.9}
                ports:
                  - "9200:9200"
                environment:
                  - discovery.type=single-node
                  - xpack.security.enabled=false
                  - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
                volumes:
                  - elasticsearch-prod-data:/usr/share/elasticsearch/data
                restart: always

              kibana:
                image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION:-7.17.9}
                ports:
                  - "${KIBANA_PORT:-5601}:5601"
                environment:
                  - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
                depends_on:
                  - elasticsearch
                restart: always
              nginx:
                image: nginx:latest
                ports:
                  - "80:80"
                  - "443:443"
              volumes:
                - ./nginx/conf:/etc/nginx/conf.d
                - ./nginx/ssl:/etc/nginx/ssl
              depends_on:
                - app
              restart: always

            volumes:
              postgres-prod-data:
              redis-data:
              elasticsearch-prod-data:
            EOL

            # .env.prod 파일 생성
            cat > .env.prod << EOL
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_HOST=redis
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ELASTIC_VERSION=7.17.9
            KIBANA_PORT=5601
            APP_PORT=9000
            SPRING_PROFILES_ACTIVE=prod
            EOL

            # Docker Compose 실행 (운영 환경 설정)
            docker-compose -f docker-compose-prod.yml --env-file .env.prod down
            docker-compose -f docker-compose-prod.yml --env-file .env.prod pull
            docker-compose -f docker-compose-prod.yml --env-file .env.prod up -d

            # 사용하지 않는 이미지 정리
            docker image prune -f